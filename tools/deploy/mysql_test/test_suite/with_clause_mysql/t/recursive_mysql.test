# owner: dachuan.sdc
# owner group: sql2
# tags: optimizer

--disable_warnings
drop database if exists cte_st;
--enable_warnings
create database cte_st;
use cte_st;

--result_format 4
create table emp (id int, name varchar(20), leaderid int);
insert into emp values(1, 'A', '0');
insert into emp values(2, 'AA', '1');
insert into emp values(3, 'AB', '1');
insert into emp values(4, 'ABA', '3');
insert into emp values(5, 'AAA', '2');
insert into emp values(6, 'ABB', '3');
insert into emp values(7, 'AAA', '5');
insert into emp values(8, 'AAA', '7');
insert into emp values(9, 'AAAA', '5');
insert into emp values(10, 'AAAB', '5');
insert into emp values(11, 'AAAC', '5');
insert into emp values(12, 'AAAA', '5');

create table dsemp (id int, name varchar(20), leaderid int) partition by hash (id) partitions 3;
insert into dsemp values(1, 'A', '0');
insert into dsemp values(2, 'AA', '1');
insert into dsemp values(3, 'AB', '1');
insert into dsemp values(4, 'ABA', '3');
insert into dsemp values(5, 'AAA', '2');
insert into dsemp values(6, 'ABB', '3');
insert into dsemp values(7, 'AAA', '5');
insert into dsemp values(8, 'AAA', '7');
insert into dsemp values(9, 'AAAA', '5');
insert into dsemp values(10, 'AAAB', '5');
insert into dsemp values(11, 'AAAC', '5');
insert into dsemp values(12, 'AAAA', '5');

create table t1(c1 int, c2 int, c3 int);
insert into t1 values(1, 2, 3);
insert into t1 values(4, 5, 6);
insert into t1 values(7, 8, 9);
insert into t1 values(10, 11, 12);
insert into t1 values(13, 14, 15);
insert into t1 values(16, 17, 18);
insert into t1 values(19, 20, 21);

create table t2 (c1 int, c2 int, c3 int);
insert into t2 values(1,1,3);
insert into t2 values(2,2,3);
insert into t2 values(3,3,3);
insert into t2 values(4,4,3);
insert into t2 values(5,5,3);

create table t44 (c1 int, c2 int, c3 int);
insert into t44 values(1,1,3);
insert into t44 values(2,2,3);
insert into t44 values(3,3,3);

create table insert_t (c1 int, c2 int, c3 int);

create table t3(c1 int primary key, c2 int, c3 varchar(32)) partition by hash (c1) partitions 3;

create table troot(c1 int primary key, c2 int, c3 int unique);
insert into troot values(1, 0, -1);
insert into troot values(2, 1, -2);
insert into troot values(3, 1, -3);
insert into troot values(4, 2, -4);
insert into troot values(5, 2, -5);
insert into troot values(6, 2, -6);
insert into troot values(7, 3, -7);
insert into troot values(8, 3, -8);
insert into troot values(9, 1, -9);
insert into troot values(10, 9, -10);
insert into troot values(11, 10, -11);
insert into troot values(12, 7, -12);
insert into troot values(13, 4, -13);

create table t4(id int, value char(10), parent_id int);
insert into t4 values(1, 'A', NULL);
insert into t4 values(2, 'B', 1);
insert into t4 values(3, 'C', 1);
insert into t4 values(4, 'D', 1);
insert into t4 values(5, 'E', 2);
insert into t4 values(6, 'F', 2);
insert into t4 values(7, 'G', 4);
insert into t4 values(8, 'H', 6);

create table z(zc int);
insert into z values(1);
insert into z values(2);
insert into z values(3);
insert into z values(4);
insert into z values(5);
insert into z values(6);
insert into z values(7);
insert into z values(8);
insert into z values(9);

##############################
##   section one cte定义
##   PART 1 定义表名的限制
##   PART 2 单个的定义
##   PART 3 多个定义
##   PART 4 subquery的变化
##   section two cte的使用
##   PART 0 cte结果正确性验证
##   PART 1 cte出现在normal型查询语句中
##   PART 2 cte出现在set型查询语句中
##   PART 3 关于数学的复杂case
##   section three cte能够出现的句式
##   PART 1 insert into
##   PART 2 select when
##   PART 3 delete from
##############################

##############################
##   section one
##   PART 1 定义表名的限制
##############################

##   PART 1.1 表名，列名不能是保留关键字，可以是分保留关键字
--error 1064
with RECURSIVE explain(a) as (select 1 from dual union all select a+1 from explain where a+1 < 10) select * from explain;

--error 1064
with RECURSIVE cte(explain) as (select 1 from dual union all select explain+1 from cte where explain+1 < 10) select * from cte;

##   PART 1.2 允许与已有的表重名
with RECURSIVE t4(a) as (select 1 from dual union all select a+1 from t4 where a+1 < 10) select * from t4;

##############################
##   PART 2 单个的定义
##############################

##   PART 2.1 定义列名重复
--error 5751
with RECURSIVE cte(a,a) as (select 1,1 from dual union all select a+1, a+1 from cte where a+1 < 10) select * from cte;

##   PART 2.2.1 定义列数量与查询产生列一致或不一致
with RECURSIVE cte(a,b) as (select 1,1 from dual union all select a+1, a+1 from cte where a+1 < 10) select * from cte;

--error 1353
with RECURSIVE cte(a,b,c) as (select 1,1 from dual union all select a+1, a+1 from cte where a+1 < 10) select * from cte;
--error 1353
with RECURSIVE cte(a) as (select 1,1 from dual union all select a+1, a+1 from cte where a+1 < 10) select * from cte;

##   PART 2.2.2 不使用定义列使用原来的列
--error 1054
with RECURSIVE cte(a,b,c) as
(
  select c1,c2,c3 from t1 where t1.c1 < 20
  union all
  select c1,c2,c3 from t1, cte where cte.a = t1.c1 and cte.c < 10
) select c1,c2,c3 from cte;


##############################
##   PART 3 多个的定义
##############################

##   混合递归和非递归，前面的cte对后面的可见
with RECURSIVE cte as (select * from t1) ,
     cte_recursive (n) as (select 1 from dual union all select n+1 from cte_recursive where n < 23)
select (select count(*) from cte_recursive) from t1;

with RECURSIVE cte(n) as (select c1 from t1) ,
     cte_recursive (n) as (select 1 from dual union all select n+1 from cte where n < 23)
select * from cte_recursive;

with RECURSIVE cte(n) as (select c1 from t1) ,
     cte_recursive (n) as (select 1 from dual union all select n+1 from cte where n < 23)
select (select count(*) from cte_recursive) from t1;

##   PART 3.1
--error 1146
with RECURSIVE
  cte1 (a, b) AS (SELECT c, d FROM cte2),
  cte2 (c, d) AS (SELECT c21, c22 FROM t2)
SELECT b, d FROM cte1 JOIN cte2
on cte1.a = cte2.c;


with RECURSIVE
  cte1 AS (select c1 from t1),
  cte2 AS (select c1 from cte1)
select * from cte1;

##   PART 3.2.1 直接嵌套定义，MySQL支持这样的直接嵌套
with RECURSIVE
  cte1 AS (
           with RECURSIVE cte2 AS (select c1 from t1)
           select c1 from cte2
          )
select c1 from cte1;

with RECURSIVE
  cte1 (cte1col) AS (
                    with RECURSIVE cte2 (cte2col) AS (select c1 from t1)
                    select cte2col from cte2
                    )
select cte1col from cte1;

with RECURSIVE
  cte1 (cte1col) AS (
                    with RECURSIVE cte2 (cte2col1, cte2col2) AS (select c1, c2 from t1)
                    select cte2col2 from cte2
                    )
select cte1col from cte1;

##   PART 3.2.2 在子查询中进行嵌套
--error 1054
with RECURSIVE cte(a,b) as (select * from (with RECURSIVE cteb(a, b) as (select c1, c2 from t1 union all select c+1, d+1 from cteb where c < 100) select * from cteb) bac) select * from cte;

with RECURSIVE cteb(a,b) as
(
select c1, c2 from t1 union all select a+1, b+1 from cteb where a < 100
),
cte(c,d) as
(
select * from cteb bac
)
select * from cte;

##   PART 3.2.3 测试能不能正确解析普通的union all
with RECURSIVE cte(a) as (select 1 from dual union all select 2 from dual), cte_1(b) as (select 1 from dual union all select * from cte) select * from cte_1;

##############################
##   PART 4 subquery的变化
##############################

##   PART 4.1.0 subquery的变化(限制)
##   递归的句式主要变化在左支可以很负责，右支作join的的表可以是子查询，这个子查询可以写的
##   非常的复杂
##   递归cte只能有两个入口
--error 5743
with RECURSIVE cte(n) AS (select 1 from dual UNION ALL select n+1 from cte where n < 3 UNION ALL select 2 from dual) select * from cte;

## 递归必须包含union all
--error 3573
with RECURSIVE cte(n) AS ( select 1 from cte) select * from cte;

set @@ob_query_timeout=1000000;
--error 3575
with RECURSIVE cte(n) AS ( select 1 from dual UNION ALL select sum(n+1) from cte) select * from cte;

set @@ob_query_timeout=10000000;

##递归查询只允许有两个入口
--error 5743
with RECURSIVE cte(n) AS (select 1 from dual UNION ALL select n+1 from cte where n < 3 union all select n+1 from cte where n < 2) select * from cte;

--error 5746
with RECURSIVE cte(n) as (select 1 from dual union all select c1 from t1 union all (with RECURSIVE cte(n) as (select c1 from t1) select * from cte)) select * from cte;

--error 3577
with RECURSIVE cte(n) as (select n from (select 1 from dual union all select n+1 from cte) tmp) select * from cte;

## 不能出现在right join的左边，left join的右边，full join的两边
--error 3576
with RECURSIVE cte(n) AS (select c1 from t1 UNION ALL select n+1 from cte right join t2 on cte.n < 3 and t2.c1 < 22) select * from cte;
--error 3576
with RECURSIVE cte(n) AS (select c1 from t1 UNION ALL select n+1 from t2 left join cte on cte.n < 3 and t2.c1 < 22) select * from cte;
--error 3576
with RECURSIVE cte(n) AS (select c1 from t1 UNION ALL select n+1 from t2 full join cte on cte.n < 3 and t2.c1 < 22) select * from cte;
--error 3576
with RECURSIVE cte(n) AS (select c1 from t1 UNION ALL select n+1 from cte full join t2 on cte.n < 3 and t2.c1 < 22) select * from cte;
set @@ob_query_timeout=10000000;


##   PART 4.2 左支不停的变化
##   带有where
with RECURSIVE
  cte2(c,d) AS (SELECT c1,c2 from t1 where c1 < 3 union all select c+1, d+1 from cte2 where c < 10)
select c,d from cte2;

with RECURSIVE
  cte2(c,d) AS (SELECT c1,c2 from t1 where c1+'1' <= 3 union all select c+1, d+1 from cte2 where c < 10)
select c,d from cte2;

##   带有group
with RECURSIVE
  cte2(c,d) AS (SELECT c1,c2 from t1 group by c1,c2 union all select c+1, d+1 from cte2 where c < 10)
select c,d from cte2;

##   带有having
with RECURSIVE
  cte2(c,d) AS (SELECT c1,c2 from t1 where t1.c1 > 5 union all select c+1, d+1 from cte2 where c < 30)
select c,d from cte2;

##   带有order
with RECURSIVE
  cte2(c,d) AS ( select c1, c2 + 1 as c3 from t1 order by c2 union all select c+1, d+1 from cte2 where c < 30)
select c,d from cte2;

with RECURSIVE
  cte2(c,d) AS (select t1.c1, t2.c2 from t1 left join t2 on t1.c1=t2.c1 order by t1.c1 union all select c+1, d+1 from cte2 where c < 30)
select c from cte2;


##   PART 4.3 右支不停的变化
with RECURSIVE
  cte(c,d) AS (SELECT c1,c2 from t1 where c1 < 3 union all select c+1, d+1 from cte, t2 where t2.c1 = c and t2.c2 > some (select c1 from t44 t99 group by c1))
select * from cte;

with RECURSIVE
  cte(c,d) AS (SELECT c1,c2 from t1 where c1 < 3 union all select c+1, d+1 from cte, t2 where t2.c1 = c and t2.c2 > some (select c1 from t44 t99 group by c1))
select * from cte;

#递归cte中间表与已有的表重名
create table ex (c1 int, c2 int);

with RECURSIVE ex(c1, c2) as (select 1, 1 from dual union all select c1+1, c2+1 from ex where c1 < 5) select * from ex;

with RECURSIVE ex(c1, c2) as (select 1, 1 from dual union all select c1+1, c2+1 from ex where c1 < 5) select * from ex;


##############################
##   section two cte的使用
##############################

##   PART 0 cte结果正确性验证
##   基础case
with RECURSIVE cte(n) as (select 1 from dual union all select n+1 from cte where n < 23) select n from cte;

with RECURSIVE cte (a,b,c) as  (     select id, name, leaderid from emp where emp.id = 1     union all     select emp.id ,emp.name, emp.leaderid from emp, cte where emp.leaderid = cte.a )  select * from cte;


##   与MySQL结果进行核对，验证正确性，句式1

with RECURSIVE cte( id, val, lev) as (
  select id, value , 0 as lev from t4 where parent_id is null
  union all
  select t4.id, t4.value, cte.lev+1 from cte join t4 on t4.parent_id=cte.id)
select * from cte;

##   与MySQL结果进行核对，验证正确性，句式3
--error 5746
with RECURSIVE cte(a,b,c) as
(
  select c1,c2,c3 from t1 where t1.c1 < 20
  union all
  select c1,c2,c3 from t1, cte where cte.a = t1.c1 and cte.c < 10
) select * from cte;

##   与MySQL结果进行核对，验证正确性，句式4
with RECURSIVE cte (a,b,c) as
(
  select id, name, leaderid from emp where emp.id = 1
  union all
  select emp.id ,emp.name, emp.leaderid from emp, cte where emp.leaderid = cte.a
)
select * from cte;

##    join hint
--error 5746
with RECURSIVE cte(n) as
(
  select /*+NO_USE_HASH(t1,t2)*/ t1.c1 from t1, t2 where t1.c1 = t2.c1
  union all
  select t1.c1 from cte, t1 where t1.c1 = cte.n
)
select * from cte;


--error 5746
with RECURSIVE cte(a,b,c) as
(
  select c1,c2,c3 from t1 where t1.c1 < 20
  union all
  select c1,c2,c3 from t1, cte where cte.a = t1.c1 and cte.c < 10)
select count(distinct cte.a), avg(distinct cte.b) from cte where cte.c < 10;



##   PART 1 cte出现在normal型查询语句中
##   PART 1.1 最基本用法(单表)
##   最简单的使用方法

with RECURSIVE cte as (select * from t1) select (
with RECURSIVE cte(col1, col2, col3) as(select * from t2) select count(*) from cte
) from t1;

--error 5746
with RECURSIVE cte(a,b,c) as
(
select c1,c2,c3 from t1 where t1.c1 < 20
union all
select c1,c2,c3 from t1, cte where cte.a = t1.c1 and cte.c < 10
)
select a, b, c from cte;

##   主句含有order + 对伪列排序序
--error 5746
with RECURSIVE cte(a,b,c) as
(
select c1,c2,c3 from t1 where t1.c1 < 20
union all
select c1,c2,c3 from t1, cte where cte.a = t1.c1 and cte.c < 10
)
select a, b, c from cte order by a;

##   对主句中的cte取别名后看看能否继续使用+在in中使用+where
--error 5746
with RECURSIVE cte(a,b,c) as
(
select c1,c2,c3 from t1 where t1.c1 < 20
union all
select c1,c2,c3 from t1, cte where cte.a = t1.c1 and cte.c < 10
)
select z1.a from cte z1, t2 where z1.a in (1,4,7,11) and z1.a = t2.c2;

##   重命名的列出现在order+where中
--error 5746
with RECURSIVE cte(a,b,c) as
(
select c1,c2,c3 from t1 where t1.c1 < 20
union all
select c1,c2,c3 from t1, cte where cte.a = t1.c1 and cte.c < 10
)
select a from cte where a in (1,4,11) order by a;

##   别名列和原本列的名字一样
--error 1052
with RECURSIVE cte(c1,c2,c3) as
(
select c1,c2,c3 from t1 where t1.c1 < 20
union all
select c1,c2,c3 from t1, cte where cte.c1 = t1.c1 and cte.c3 < 10
)
select c2 from cte;

##   在field list中写了inline，里面使用了cte
with RECURSIVE cte(n) as (select 1 from dual union all select n+1 from cte where n < 23) select (select count(*) from cte) from cte;

##   join＋having not＋order by
--error 5746
with RECURSIVE cte1(a,b,c) as
(
select c1,c2,c3 from t1 where t1.c1 < 20
union all
select c1,c2,c3 from t1, cte1 cte where cte.a = t1.c1 and cte.c < 10
)
select * from cte1 left join t2 on cte1.a=t2.c1 where t2.c1 != cte1.a order by cte1.a;



##   PART 1.2 最基本用法(多表)

##   第三cte引用第二个，第二个又引用第一个。结果与MySQL一致。
explain basic
with RECURSIVE cte1(a,b,c) as
(
select 1,1,1 from dual
union all
select a+1,b+1,c+1 from cte1 where cte1.a < 10
),
cte2 (a,b,c) as
(
select cte1.a,cte1.b,cte1.c from cte1
union all
select a+1,b+1,c+1 from cte2 where cte2.a < 10
),
cte3 (a,b,c) as
(
select cte2.a,cte2.b,cte2.c from cte2
union all
select cte3.a+1,cte3.b+1,cte3.c+1 from cte3, cte2 where cte2.a < 3 and cte3.a < cte2.b and cte3.a < 10
)
SELECT cte1.a, cte1.b FROM cte1 JOIN cte3
on cte1.a < cte3.c;

set ob_query_timeout = 100000000;
with RECURSIVE cte1(a,b,c) as
(
select 1,1,1 from dual
union all
select a+1,b+1,c+1 from cte1 where cte1.a < 10
),
cte2 (a,b,c) as
(
select cte1.a,cte1.b,cte1.c from cte1
union all
select a+1,b+1,c+1 from cte2 where cte2.a < 10
),
cte3 (a,b,c) as
(
select cte2.a,cte2.b,cte2.c from cte2
union all
select cte3.a+1,cte3.b+1,cte3.c+1 from cte3, cte2 where cte2.a < 3 and cte3.a < cte2.b and cte3.a < 10
)
SELECT cte1.a, cte1.b FROM cte1 JOIN cte3
on cte1.a < cte3.c;
set ob_query_timeout = 10000000;


##    关于数学的复杂case
##about math
with RECURSIVE fibonacci (n, fib_n, next_fib_n) AS
(
  SELECT 1, 0, 1 from dual
  UNION ALL
  SELECT n + 1, next_fib_n, fib_n + next_fib_n
  FROM fibonacci WHERE n < 10
)
SELECT * FROM fibonacci;

with RECURSIVE cte(n) as (select 1 from dual union all select n+1 from cte where n<6),
     prod(lastnum, lastprod) as (select min(n), min(n) from cte
          union all
          select n, n*lastprod from cte, prod where n = prod.lastnum+1)
select * from prod;

with RECURSIVE cte as (select 18 d from dual),
     prod (lastnum, lastprod) as (
          select 1, 1 from dual
          union all
          select lastnum+1, (lastnum+1)*lastprod from prod, cte where lastnum < d)
select * from prod, cte where lastnum = d;



##############################
##    insert into
##############################
insert into insert_t with RECURSIVE cte(a,b,c) as (select 1,2,3 from dual union all select a+1,b+1,c+1 from cte where a < 10) SELECT * FROM cte;
select * from insert_t;


##############################
##    select when
##############################
with RECURSIVE cte(c1, c2, c3) as (select 1,1,1 from dual union all select c1+1,c2+1,c3+1 from cte where cte.c1 < 50) select c1, max(c2), CASE max(c2) when 4 then 4 when 43 then 43 else 1 end from cte group by c1 order by c1;

##############################
##    delete from
##############################

delete from t1 where c1 = ( with RECURSIVE cte(c1, c2, c3) as (select 1,1,1 from dual union all select c1+1,c2+1,c3+1 from cte where cte.c1 < 50) select c1 from cte where c2 = 3);
select * from t1;


drop database cte_st;