# owner: dachuan.sdc
--echo # owner group: sql2
--echo # tags: optimizer

--result_format 4
--disable_warnings
drop table if exists EMP;
drop table if exists emp1;
drop database if exists cte_st;
--enable_warnings
create database cte_st;
use cte_st;

create table EMP (
  EMPno  number,
  ENAME VARCHAR(30),
  JOB VARCHAR(30),
  MGR number(4),
  HIREDATE date,
  SAL number(7,2),
  COMM number(7,2),
  DEPTNO number(2)
) ;

INSERT INTO EMP values (7369,'SMITH','CLERK',7902,    str_to_date('1980-12-17','%Y-%m-%d'),800,NULL, 20) ;
INSERT INTO EMP VALUES (7499, 'ALLEN','SALESMAN',7698,str_to_date('1981-02-20','%Y-%m-%d'),1600,300,30) ;
INSERT INTO EMP VALUES (7521,'WARD','SALESMAN',7698,  str_to_date('1981-02-22','%Y-%m-%d'),1250, 500, 30) ;
INSERT INTO EMP VALUES (7566,'JONES','MANAGER',7839,  str_to_date('1981-08-02','%Y-%m-%d'), 2975, NULL, 20) ;
INSERT INTO EMP VALUES (7654,'MARTIN','SALESMAN', 7698, str_to_date('1981-09-28','%Y-%m-%d'), 1250, 1400, 30) ;
INSERT INTO EMP VALUES (7698, 'BLAKE','MANAGER', 7839,  str_to_date('1981-05-01','%Y-%m-%d'), 2850, NULL, 30) ;
INSERT INTO EMP VALUES (7782, 'CLARK','MANAGER', 7839,  str_to_date('1981-06-09','%Y-%m-%d'), 2450, NULL, 10) ;
insert into EMP values (7788,'SCOTT','ANALYST', 7566,   str_to_date('1987-08-19','%Y-%m-%d'), 3000, null, 20) ;
INSERT INTO EMP VALUES (7839, 'KING','PRESIDENT', NULL, str_to_date('1981-11-17','%Y-%m-%d'), 5000, NULL, 10) ;
INSERT INTO EMP VALUES (7844, 'TURNER','SALESMAN', 7698, str_to_date('1981-09-08','%Y-%m-%d'), 1500, 0, 30) ;
INSERT INTO EMP VALUES(7876, 'ADAMS','CLERK', 7788,     str_to_date('1987-05-23','%Y-%m-%d'), 1100, NULL, 20) ;
INSERT INTO EMP VALUES(7900, 'JAMES', 'CLEARK', 7698,   str_to_date('1981-12-03','%Y-%m-%d'), 950, NULL, 30) ;
INSERT INTO EMP VALUES(7902, 'FORD','ANALYST',7566,     str_to_date('1981-12-03','%Y-%m-%d'), 3000, NULL, 20) ;
INSERT INTO EMP VALUES(7934,'MILLER','CLERK', 7782,     str_to_date('1982-01-23','%Y-%m-%d'), 1300,NULL, 10) ;

CREATE TABLE emp1 (
   empno    VARCHAR(4000) NOT NULL,
   ename    VARCHAR(14),
   job      VARCHAR(9),
   mgr      VARCHAR(4000),
   hiredate DATE,
   sal      NUMBER(7,2),
   comm     NUMBER(7,2),
   deptno   NUMBER(2));

INSERT INTO emp1 values (7369, 'SMITH', 'CLERK', 7902, str_to_date('1980-12-17',
'%Y-%m-%d'), 800, null, 20);
INSERT INTO emp1 values (7499, 'ALLEN', 'SALESMAN', 7698, str_to_date('1981-02-20', '%Y-%m-%d'), 1600, 300, 30);
INSERT INTO emp1 values (7521, 'WARD', 'SALESMAN', 7698, str_to_date('1981-02-22',
'%Y-%m-%d'), 1250, 500, 30);
INSERT INTO emp1 values (7566, 'JONES', 'MANAGER', 7839, str_to_date('1981-08-02',
'%Y-%m-%d'), 2975, null, 20);
INSERT INTO emp1 values (7654, 'MARTIN', 'SALESMAN', 7698, str_to_date('1981-09-28', '%Y-%m-%d'), 1250, 1400, 30);
INSERT INTO emp1 values (7698, 'BLAKE', 'MANAGER', 7839, str_to_date('1981-05-01',
'%Y-%m-%d'), 2850, null, 30);
INSERT INTO emp1 values (7782, 'CLARK', 'MANAGER', 7839, str_to_date('1981-06-09'
, '%Y-%m-%d'), 2450, null, 10);
INSERT INTO emp1 values (7788, 'SCOTT', 'ANALYST', 7566, str_to_date('1987-08-19',
'%Y-%m-%d'), 3000, null, 20);
INSERT INTO emp1 values (7839, 'KING', 'PRESIDENT', null, str_to_date('1981-11-17', '%Y-%m-%d'), 5000, null, 10);
INSERT INTO emp1 values (7844, 'TURNER', 'SALESMAN', 7698, str_to_date('1981-09-08', '%Y-%m-%d'), 1500, 0, 30);
INSERT INTO emp1 values (7876, 'ADAMS', 'CLERK', 7788, str_to_date('1987-05-23',
'%Y-%m-%d'), 1100, null, 20);
INSERT INTO emp1 values (7900, 'JAMES', 'CLERK', 7698, str_to_date('1981-12-03',
'%Y-%m-%d'), 950, null, 30);
INSERT INTO emp1 values (7902, 'FORD', 'ANALYST', 7566, str_to_date('1981-12-03',
'%Y-%m-%d'), 3000, null, 20);
INSERT INTO emp1 values (7934, 'MILLER', 'CLERK', 7782, str_to_date('1982-01-23',
'%Y-%m-%d'), 1300, null, 10);

INSERT INTO emp1 values (8100, 'Eve', 'MANAGER', 7839, str_to_date('1984-05-01',
'%Y-%m-%d'), 2850, null, 30);
INSERT INTO emp1 values (8101, 'Eve1', 'MANAGER', 8100, str_to_date('1984-05-01',
'%Y-%m-%d'), 2850, null, 30);
INSERT INTO emp1 values (8108, 'Eve8', 'CLERK', 8101, str_to_date('1984-05-01',
'%Y-%m-%d'), 2850, null, 30);

--echo ## =======================================================================
--echo ## Test Case 1:
--echo ## - recursive with RECURSIVE Query: Nested Loop Join
--echo ## =======================================================================

with RECURSIVE rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM emp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_NL(r e) */  e.ename, e.mgr, e.empno
    FROM rw r, emp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

--echo ## =======================================================================
--echo ## Test Case 2:
--echo ## - recursive with RECURSIVE Query: SORT MERGE Join
--echo ## =======================================================================

with RECURSIVE rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM emp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_MERGE(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, emp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

--echo ## =======================================================================
--echo ## Test Case 3:
--echo ## - recursive with RECURSIVE Query: Hash Join
--echo ## =======================================================================

with RECURSIVE rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM emp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_HASH(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, emp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

--echo ## =======================================================================
--echo ## Test Case 4:
--echo ## - recursive with RECURSIVE Query: Join in Initialisation Branch
--echo ## =======================================================================
--sorted_result
with RECURSIVE rw (ename, mgr, empno) AS
(
    SELECT /*+ USE_NL(e d) */ e.ename, e.mgr, e.empno
    FROM emp e, emp d
    WHERE e.sal = d. sal
    UNION ALL
    SELECT /*+ USE_HASH(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, emp e, emp d
    WHERE r.empno = e.mgr and e.sal = d.sal
)
SELECT ename, empno, mgr
FROM rw;

--echo ## =======================================================================
--echo ## Test Case 6:
--echo ## - recursive with RECURSIVE Query: Hash Join without using hints
--echo ##                         Static input on build side and fits in memory
--echo ## =======================================================================

with RECURSIVE rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM emp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT e.ename, e.mgr, e.empno
    FROM emp e, rw r
    WHERE e.mgr = r.empno
)
SELECT ename, empno, mgr
FROM rw;

--echo ## =======================================================================
--echo ## Test Case 7:
--echo ## - recursive with RECURSIVE Query: Hash Join without using hints
--echo ##                         Static input on probe side and fits in memory
--echo ## =======================================================================

with RECURSIVE rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM emp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT e.ename, e.mgr, e.empno
    FROM rw r, emp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

--echo ## =======================================================================
--echo ## 测试8-15都是在测试join的顺序或者hint的顺序
--echo ## Test Case 8:
--echo ## - recursive with RECURSIVE Query: Join Order tests
--echo ##                         pump >< emp >< emp1
--echo ## =======================================================================

with RECURSIVE rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM emp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM rw r, emp e, emp1 n
  WHERE r.mgr = e.empno and e.mgr = n.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

--echo ## =======================================================================
--echo ## Test Case 9:
--echo ## - recursive with RECURSIVE Query: Join Order tests
--echo ##                         emp >< pump >< emp1
--echo ## =======================================================================

with RECURSIVE rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM emp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp e, rw r, emp1 n
  WHERE e.empno = r.mgr and e.mgr = n.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

--echo ## =======================================================================
--echo ## Test Case 10:
--echo ## - recursive with RECURSIVE Query: Join Order tests
--echo ##                         emp >< emp1 >< pump
--echo ## =======================================================================

with RECURSIVE rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM emp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp e, emp1 n, rw r
  WHERE e.mgr = n.empno and e.empno = r.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

--echo ## =======================================================================
--echo ## Test Case 11:
--echo ## - recursive with RECURSIVE Query: Join Order tests
--echo ##                         emp1 >< emp >< pump
--echo ## =======================================================================

with RECURSIVE rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM emp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, emp e, rw r
  WHERE n.empno = e.mgr and e.empno = r.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

--echo ## =======================================================================
--echo ## Test Case 12:
--echo ## - recursive with RECURSIVE Query: Join Order tests
--echo ##                         pump >< emp
--echo ## =======================================================================

with RECURSIVE rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM emp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ ORDERED  USE_HASH (r e) */ e.ename, e.mgr, e.empno
    FROM rw r, emp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

--echo ## =======================================================================
--echo ## Test Case 13:
--echo ## - recursive with RECURSIVE Query: Join Order tests
--echo ##                         emp >< pump
--echo ## =======================================================================

with RECURSIVE rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM emp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ ORDERED  USE_HASH (r e) */ e.ename, e.mgr, e.empno
    FROM  emp e, rw r
    WHERE e.mgr = r.empno
)
SELECT ename, empno, mgr
FROM rw;

--echo ## =======================================================================
--echo ## Test Case 14:
--echo ## - recursive with RECURSIVE Query: Join Order tests
--echo ##                         emp1 >< pump >< emp
--echo ## =======================================================================

with RECURSIVE rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM emp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, rw r, emp e
  WHERE n.empno = e.mgr and r.mgr = e.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

--echo ## =======================================================================
--echo ## Test Case 15:
--echo ## - recursive with RECURSIVE Query: Join Order tests
--echo ##                         pump >< emp1 >< emp
--echo ## =======================================================================

with RECURSIVE rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM emp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM rw r, emp1 n, emp e
  WHERE r.mgr = e.empno and n.empno = e.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

--echo ## =======================================================================
--echo ## Test Case 16:
--echo ## - recursive with RECURSIVE Query: Join Skew handling. No local filter
--echo ## =======================================================================

with RECURSIVE rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM emp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ PQ_SKEW (r) */ e.ename, e.mgr, e.empno
    FROM rw r, emp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

--echo ## =======================================================================
--echo ## Test Case 17:
--echo ## - recursive with RECURSIVE Query: Join Skew handling with RECURSIVE an additional local filter
--echo ## =======================================================================

with RECURSIVE rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM emp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ PQ_SKEW (r) */ e.ename, e.mgr, e.empno
    FROM rw r, emp e
    WHERE r.empno = e.mgr and e.empno < e.mgr
)
SELECT ename, empno, mgr
FROM rw;

CREATE TABLE tenk1 (
  unique1   int,
  unique2   int,
  two     int,
  four    int,
  ten     int,
  twenty    int,
  hundred   int,
  thousand  int,
  twothousand int,
  fivethous int,
  tenthous  int,
  odd     int,
  even    int,
  stringu1  VARCHAR(50),
  stringu2  VARCHAR(50),
  string4   VARCHAR(50)
);

with RECURSIVE q1(x,y) AS (SELECT 1,2 FROM DUAL)
SELECT * FROM q1, q1  q2;

SELECT count(*) FROM (
  with RECURSIVE q1(x) AS (SELECT 1 FROM dual)
    SELECT * FROM q1
  UNION
    SELECT * FROM q1
) ss;

CREATE TABLE department (
	id INTEGER PRIMARY KEY,
	parent_department INTEGER,
	name VARCHAR(100)
);

INSERT INTO department VALUES (0, NULL, 'ROOT');
INSERT INTO department VALUES (1, 0, 'A');
INSERT INTO department VALUES (2, 1, 'B');
INSERT INTO department VALUES (3, 2, 'C');
INSERT INTO department VALUES (4, 2, 'D');
INSERT INTO department VALUES (5, 0, 'E');
INSERT INTO department VALUES (6, 4, 'F');
INSERT INTO department VALUES (7, 5, 'G');

with RECURSIVE subdepartment(lev, id, parent_department, name) AS
(
	SELECT 1, a.* FROM department a WHERE name = 'A'
	UNION ALL
	SELECT sd.lev + 1, d.* FROM department  d, subdepartment sd WHERE d.parent_department = sd.id
)
SELECT * FROM subdepartment ORDER BY name;

with RECURSIVE subdepartment(lev, id, parent_department, name) AS
(
	SELECT 1, a.* FROM department a WHERE name = 'A'
  UNION ALL
	SELECT sd.lev + 1, d.* FROM department  d, subdepartment  sd WHERE d.parent_department = sd.id
)
SELECT * FROM subdepartment WHERE lev >= 2 ORDER BY name;

with RECURSIVE subdepartment AS
(
	SELECT * FROM department WHERE name = 'A'
)
SELECT * FROM subdepartment ORDER BY name;

SELECT count(*) FROM (
    with RECURSIVE t(n) AS (
        SELECT 1 FROM DUAL UNION ALL SELECT n + 1 FROM t WHERE n < 500
    )
    SELECT * FROM t)  t WHERE n < (
        SELECT count(*) FROM (
            with RECURSIVE t(n) AS (
                   SELECT 1 FROM DUAL UNION ALL SELECT n + 1 FROM t WHERE n < 100
                )
            SELECT * FROM t WHERE n < 50000
         )  t WHERE n < 100);

with RECURSIVE q1(x,y) AS (
    SELECT hundred, sum(ten) FROM tenk1 GROUP BY hundred
  )
SELECT count(*) FROM q1 WHERE y > (SELECT sum(y)/100 FROM q1 qsub);

with RECURSIVE t(i,j) AS (
	select 1, 1 from dual
	UNION ALL
	SELECT t2.i, t.j+1 FROM (SELECT 2 AS i FROM DUAL UNION ALL SELECT 3 AS i FROM DUAL) t2 JOIN t ON (t2.i = t.i+1))
	SELECT * FROM t;

create table graph( f int, t int, label VARCHAR(50) );

insert into graph values
	(1, 2, 'arc 1 -> 2');
insert into graph values
	(1, 3, 'arc 1 -> 3');
insert into graph values
	(2, 3, 'arc 2 -> 3');
insert into graph values
	(1, 4, 'arc 1 -> 4');
insert into graph values
	(4, 5, 'arc 4 -> 5');
insert into graph values
	(5, 1, 'arc 5 -> 1');

with RECURSIVE
  y (id) AS (select 1 from dual),
  x (id) AS (SELECT * FROM y UNION ALL SELECT id+1 FROM x WHERE id < 5)
SELECT * FROM x;

with RECURSIVE
   x(id) AS
     (select 1 from dual UNION ALL SELECT id+1 FROM x WHERE id < 5),
   y(id) AS
     (select 1 from dual UNION ALL SELECT id+1 FROM y WHERE id < 10)
 SELECT y.*, x.* FROM y LEFT JOIN x on y.id = x.id;

with RECURSIVE
   x(id) AS
     (select 1 from dual UNION ALL SELECT id+1 FROM x WHERE id < 5),
   y(id) AS
     (select 1 from dual UNION ALL SELECT id+1 FROM x WHERE id < 10)
 SELECT y.*, x.* FROM y LEFT JOIN x on y.id = x.id;

with RECURSIVE
   x(id) AS
     (SELECT 1 FROM DUAL UNION ALL SELECT id+1 FROM x WHERE id < 3 ),
   y(id) AS
     (SELECT * FROM x UNION ALL SELECT * FROM x),
   z(id) AS
     (SELECT * FROM x UNION ALL SELECT id+1 FROM z WHERE id < 10)
 SELECT * FROM z;

with RECURSIVE
   x(id) AS
     (SELECT 1 FROM DUAL UNION ALL SELECT id+1 FROM x WHERE id < 3 ),
   y(id) AS
     (SELECT * FROM x UNION ALL SELECT * FROM x),
   z(id) AS
     (SELECT * FROM y UNION ALL SELECT id+1 FROM z WHERE id < 10)
 SELECT * FROM z;

CREATE TABLE y (a INTEGER);
insert into y values(1);
insert into y values(2);
insert into y values(3);
insert into y values(4);
insert into y values(5);
insert into y values(6);
insert into y values(7);
insert into y values(8);
insert into y values(9);
insert into y values(10);

with RECURSIVE x(n) AS (SELECT a FROM y WHERE a = 1
	UNION ALL
	SELECT x.n+1 FROM x LEFT JOIN y ON x.n = y.a WHERE n < 10)
SELECT * FROM x;

with RECURSIVE x(n) AS (SELECT a FROM y WHERE a = 1
	UNION ALL
	SELECT x.n+1 FROM y RIGHT JOIN x ON x.n = y.a WHERE n < 10)
SELECT * FROM x;

--error 3575
with RECURSIVE x(n) AS (SELECT 1 from dual UNION ALL SELECT count(*) FROM x)
  SELECT * FROM x;

--error 3575
with RECURSIVE x(n) AS (SELECT 1 from dual UNION ALL SELECT sum(n) FROM x)
  SELECT * FROM x;

with RECURSIVE x(n) AS (SELECT 1 from dual UNION ALL SELECT n+1 FROM x where n < 10 ORDER BY 1 ) SELECT * FROM x;
with RECURSIVE x(n) AS (SELECT 1 FROM DUAL UNION ALL SELECT n+1 FROM x where n < 10 FOR UPDATE)
  SELECT * FROM x;

CREATE TABLE x (n integer);
with RECURSIVE cte(foo) as ( select 42 from dual) select * from ((select foo from cte)) q;

select ( with RECURSIVE cte(foo) as ( select 1 from dual )
         select (select foo from cte) from dual)
from tenk1;

with RECURSIVE outermost(x) AS (
  SELECT 1 FROM DUAL
  UNION (with RECURSIVE innermost as (SELECT 2 FROM DUAL)
         SELECT * FROM innermost
         UNION SELECT 3 FROM DUAL)
)
SELECT * FROM outermost ORDER BY 1;

--error 5743
with RECURSIVE outermost(x) AS (
  SELECT 1 FROM DUAL
  UNION (with RECURSIVE innermost as (SELECT 2 FROM DUAL)
         SELECT * FROM outermost  # fail
         UNION SELECT * FROM innermost)
)
SELECT * FROM outermost ORDER BY 1;

--error 5741
with RECURSIVE outermost(x) AS (
  SELECT 1 FROM DUAL
  UNION (with RECURSIVE innermost as (SELECT 2 FROM DUAL)
         SELECT * FROM outermost
         )
)
SELECT * FROM outermost ORDER BY 1;

drop database cte_st;