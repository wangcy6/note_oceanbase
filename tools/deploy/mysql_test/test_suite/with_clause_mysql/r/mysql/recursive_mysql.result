drop database if exists cte_st;
create database cte_st;
use cte_st;
result_format: 4
create table emp (id int, name varchar(20), leaderid int);
insert into emp values(1, 'A', '0');
insert into emp values(2, 'AA', '1');
insert into emp values(3, 'AB', '1');
insert into emp values(4, 'ABA', '3');
insert into emp values(5, 'AAA', '2');
insert into emp values(6, 'ABB', '3');
insert into emp values(7, 'AAA', '5');
insert into emp values(8, 'AAA', '7');
insert into emp values(9, 'AAAA', '5');
insert into emp values(10, 'AAAB', '5');
insert into emp values(11, 'AAAC', '5');
insert into emp values(12, 'AAAA', '5');

create table dsemp (id int, name varchar(20), leaderid int) partition by hash (id) partitions 3;
insert into dsemp values(1, 'A', '0');
insert into dsemp values(2, 'AA', '1');
insert into dsemp values(3, 'AB', '1');
insert into dsemp values(4, 'ABA', '3');
insert into dsemp values(5, 'AAA', '2');
insert into dsemp values(6, 'ABB', '3');
insert into dsemp values(7, 'AAA', '5');
insert into dsemp values(8, 'AAA', '7');
insert into dsemp values(9, 'AAAA', '5');
insert into dsemp values(10, 'AAAB', '5');
insert into dsemp values(11, 'AAAC', '5');
insert into dsemp values(12, 'AAAA', '5');

create table t1(c1 int, c2 int, c3 int);
insert into t1 values(1, 2, 3);
insert into t1 values(4, 5, 6);
insert into t1 values(7, 8, 9);
insert into t1 values(10, 11, 12);
insert into t1 values(13, 14, 15);
insert into t1 values(16, 17, 18);
insert into t1 values(19, 20, 21);

create table t2 (c1 int, c2 int, c3 int);
insert into t2 values(1,1,3);
insert into t2 values(2,2,3);
insert into t2 values(3,3,3);
insert into t2 values(4,4,3);
insert into t2 values(5,5,3);

create table t44 (c1 int, c2 int, c3 int);
insert into t44 values(1,1,3);
insert into t44 values(2,2,3);
insert into t44 values(3,3,3);

create table insert_t (c1 int, c2 int, c3 int);

create table t3(c1 int primary key, c2 int, c3 varchar(32)) partition by hash (c1) partitions 3;

create table troot(c1 int primary key, c2 int, c3 int unique);
insert into troot values(1, 0, -1);
insert into troot values(2, 1, -2);
insert into troot values(3, 1, -3);
insert into troot values(4, 2, -4);
insert into troot values(5, 2, -5);
insert into troot values(6, 2, -6);
insert into troot values(7, 3, -7);
insert into troot values(8, 3, -8);
insert into troot values(9, 1, -9);
insert into troot values(10, 9, -10);
insert into troot values(11, 10, -11);
insert into troot values(12, 7, -12);
insert into troot values(13, 4, -13);

create table t4(id int, value char(10), parent_id int);
insert into t4 values(1, 'A', NULL);
insert into t4 values(2, 'B', 1);
insert into t4 values(3, 'C', 1);
insert into t4 values(4, 'D', 1);
insert into t4 values(5, 'E', 2);
insert into t4 values(6, 'F', 2);
insert into t4 values(7, 'G', 4);
insert into t4 values(8, 'H', 6);

create table z(zc int);
insert into z values(1);
insert into z values(2);
insert into z values(3);
insert into z values(4);
insert into z values(5);
insert into z values(6);
insert into z values(7);
insert into z values(8);
insert into z values(9);

##############################
##   section one cte定义
##   PART 1 定义表名的限制
##   PART 2 单个的定义
##   PART 3 多个定义
##   PART 4 subquery的变化
##   section two cte的使用
##   PART 0 cte结果正确性验证
##   PART 1 cte出现在normal型查询语句中
##   PART 2 cte出现在set型查询语句中
##   PART 3 关于数学的复杂case
##   section three cte能够出现的句式
##   PART 1 insert into
##   PART 2 select when
##   PART 3 delete from
##############################
##############################
##   section one
##   PART 1 定义表名的限制
##############################
##   PART 1.1 表名，列名不能是保留关键字，可以是分保留关键字
with RECURSIVE explain(a) as (select 1 from dual union all select a+1 from explain where a+1 < 10) select * from explain;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your OceanBase version for the right syntax to use near 'explain(a) as (select 1 from dual union all select a+1 from explain where a+1 < ' at line 1

with RECURSIVE cte(explain) as (select 1 from dual union all select explain+1 from cte where explain+1 < 10) select * from cte;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your OceanBase version for the right syntax to use near 'explain) as (select 1 from dual union all select explain+1 from cte where explai' at line 1

##   PART 1.2 允许与已有的表重名
with RECURSIVE t4(a) as (select 1 from dual union all select a+1 from t4 where a+1 < 10) select * from t4;
+------+
| a    |
+------+
|    1 |
|    2 |
|    3 |
|    4 |
|    5 |
|    6 |
|    7 |
|    8 |
|    9 |
+------+

##############################
##   PART 2 单个的定义
##############################
##   PART 2.1 定义列名重复
with RECURSIVE cte(a,a) as (select 1,1 from dual union all select a+1, a+1 from cte where a+1 < 10) select * from cte;
ERROR HY000: duplicate name found in column alias list for WITH clause

##   PART 2.2.1 定义列数量与查询产生列一致或不一致
with RECURSIVE cte(a,b) as (select 1,1 from dual union all select a+1, a+1 from cte where a+1 < 10) select * from cte;
+------+------+
| a    | b    |
+------+------+
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    9 |    9 |
+------+------+

with RECURSIVE cte(a,b,c) as (select 1,1 from dual union all select a+1, a+1 from cte where a+1 < 10) select * from cte;
ERROR HY000: View's SELECT and view's field list have different column counts
with RECURSIVE cte(a) as (select 1,1 from dual union all select a+1, a+1 from cte where a+1 < 10) select * from cte;
ERROR HY000: View's SELECT and view's field list have different column counts

##   PART 2.2.2 不使用定义列使用原来的列
with RECURSIVE cte(a,b,c) as
(
  select c1,c2,c3 from t1 where t1.c1 < 20
  union all
  select c1,c2,c3 from t1, cte where cte.a = t1.c1 and cte.c < 10
) select c1,c2,c3 from cte;
ERROR 42S22: Unknown column 'c1' in 'field list'

##############################
##   PART 3 多个的定义
##############################
##   混合递归和非递归，前面的cte对后面的可见
with RECURSIVE cte as (select * from t1) ,
     cte_recursive (n) as (select 1 from dual union all select n+1 from cte_recursive where n < 23)
select (select count(*) from cte_recursive) from t1;
+--------------------------------------+
| (select count(*) from cte_recursive) |
+--------------------------------------+
|                                   23 |
|                                   23 |
|                                   23 |
|                                   23 |
|                                   23 |
|                                   23 |
|                                   23 |
+--------------------------------------+

with RECURSIVE cte(n) as (select c1 from t1) ,
     cte_recursive (n) as (select 1 from dual union all select n+1 from cte where n < 23)
select * from cte_recursive;
+------+
| n    |
+------+
|    1 |
|    2 |
|    5 |
|    8 |
|   11 |
|   14 |
|   17 |
|   20 |
+------+

with RECURSIVE cte(n) as (select c1 from t1) ,
     cte_recursive (n) as (select 1 from dual union all select n+1 from cte where n < 23)
select (select count(*) from cte_recursive) from t1;
+--------------------------------------+
| (select count(*) from cte_recursive) |
+--------------------------------------+
|                                    8 |
|                                    8 |
|                                    8 |
|                                    8 |
|                                    8 |
|                                    8 |
|                                    8 |
+--------------------------------------+

##   PART 3.1
with RECURSIVE
  cte1 (a, b) AS (SELECT c, d FROM cte2),
  cte2 (c, d) AS (SELECT c21, c22 FROM t2)
SELECT b, d FROM cte1 JOIN cte2
on cte1.a = cte2.c;
ERROR 42S02: Table 'cte_st.cte2' doesn't exist

with RECURSIVE
  cte1 AS (select c1 from t1),
  cte2 AS (select c1 from cte1)
select * from cte1;
+------+
| c1   |
+------+
|    1 |
|    4 |
|    7 |
|   10 |
|   13 |
|   16 |
|   19 |
+------+

##   PART 3.2.1 直接嵌套定义，MySQL支持这样的直接嵌套
with RECURSIVE
  cte1 AS (
           with RECURSIVE cte2 AS (select c1 from t1)
           select c1 from cte2
          )
select c1 from cte1;
+------+
| c1   |
+------+
|    1 |
|    4 |
|    7 |
|   10 |
|   13 |
|   16 |
|   19 |
+------+

with RECURSIVE
  cte1 (cte1col) AS (
                    with RECURSIVE cte2 (cte2col) AS (select c1 from t1)
                    select cte2col from cte2
                    )
select cte1col from cte1;
+---------+
| cte1col |
+---------+
|       1 |
|       4 |
|       7 |
|      10 |
|      13 |
|      16 |
|      19 |
+---------+

with RECURSIVE
  cte1 (cte1col) AS (
                    with RECURSIVE cte2 (cte2col1, cte2col2) AS (select c1, c2 from t1)
                    select cte2col2 from cte2
                    )
select cte1col from cte1;
+---------+
| cte1col |
+---------+
|       2 |
|       5 |
|       8 |
|      11 |
|      14 |
|      17 |
|      20 |
+---------+

##   PART 3.2.2 在子查询中进行嵌套
with RECURSIVE cte(a,b) as (select * from (with RECURSIVE cteb(a, b) as (select c1, c2 from t1 union all select c+1, d+1 from cteb where c < 100) select * from cteb) bac) select * from cte;
ERROR 42S22: Unknown column 'c' in 'where clause'

with RECURSIVE cteb(a,b) as
(
select c1, c2 from t1 union all select a+1, b+1 from cteb where a < 100
),
cte(c,d) as
(
select * from cteb bac
)
select * from cte;
+------+------+
| c    | d    |
+------+------+
|    1 |    2 |
|    4 |    5 |
|    7 |    8 |
|   10 |   11 |
|   13 |   14 |
|   16 |   17 |
|   19 |   20 |
|    2 |    3 |
|    5 |    6 |
|    8 |    9 |
|   11 |   12 |
|   14 |   15 |
|   17 |   18 |
|   20 |   21 |
|    3 |    4 |
|    6 |    7 |
|    9 |   10 |
|   12 |   13 |
|   15 |   16 |
|   18 |   19 |
|   21 |   22 |
|    4 |    5 |
|    7 |    8 |
|   10 |   11 |
|   13 |   14 |
|   16 |   17 |
|   19 |   20 |
|   22 |   23 |
|    5 |    6 |
|    8 |    9 |
|   11 |   12 |
|   14 |   15 |
|   17 |   18 |
|   20 |   21 |
|   23 |   24 |
|    6 |    7 |
|    9 |   10 |
|   12 |   13 |
|   15 |   16 |
|   18 |   19 |
|   21 |   22 |
|   24 |   25 |
|    7 |    8 |
|   10 |   11 |
|   13 |   14 |
|   16 |   17 |
|   19 |   20 |
|   22 |   23 |
|   25 |   26 |
|    8 |    9 |
|   11 |   12 |
|   14 |   15 |
|   17 |   18 |
|   20 |   21 |
|   23 |   24 |
|   26 |   27 |
|    9 |   10 |
|   12 |   13 |
|   15 |   16 |
|   18 |   19 |
|   21 |   22 |
|   24 |   25 |
|   27 |   28 |
|   10 |   11 |
|   13 |   14 |
|   16 |   17 |
|   19 |   20 |
|   22 |   23 |
|   25 |   26 |
|   28 |   29 |
|   11 |   12 |
|   14 |   15 |
|   17 |   18 |
|   20 |   21 |
|   23 |   24 |
|   26 |   27 |
|   29 |   30 |
|   12 |   13 |
|   15 |   16 |
|   18 |   19 |
|   21 |   22 |
|   24 |   25 |
|   27 |   28 |
|   30 |   31 |
|   13 |   14 |
|   16 |   17 |
|   19 |   20 |
|   22 |   23 |
|   25 |   26 |
|   28 |   29 |
|   31 |   32 |
|   14 |   15 |
|   17 |   18 |
|   20 |   21 |
|   23 |   24 |
|   26 |   27 |
|   29 |   30 |
|   32 |   33 |
|   15 |   16 |
|   18 |   19 |
|   21 |   22 |
|   24 |   25 |
|   27 |   28 |
|   30 |   31 |
|   33 |   34 |
|   16 |   17 |
|   19 |   20 |
|   22 |   23 |
|   25 |   26 |
|   28 |   29 |
|   31 |   32 |
|   34 |   35 |
|   17 |   18 |
|   20 |   21 |
|   23 |   24 |
|   26 |   27 |
|   29 |   30 |
|   32 |   33 |
|   35 |   36 |
|   18 |   19 |
|   21 |   22 |
|   24 |   25 |
|   27 |   28 |
|   30 |   31 |
|   33 |   34 |
|   36 |   37 |
|   19 |   20 |
|   22 |   23 |
|   25 |   26 |
|   28 |   29 |
|   31 |   32 |
|   34 |   35 |
|   37 |   38 |
|   20 |   21 |
|   23 |   24 |
|   26 |   27 |
|   29 |   30 |
|   32 |   33 |
|   35 |   36 |
|   38 |   39 |
|   21 |   22 |
|   24 |   25 |
|   27 |   28 |
|   30 |   31 |
|   33 |   34 |
|   36 |   37 |
|   39 |   40 |
|   22 |   23 |
|   25 |   26 |
|   28 |   29 |
|   31 |   32 |
|   34 |   35 |
|   37 |   38 |
|   40 |   41 |
|   23 |   24 |
|   26 |   27 |
|   29 |   30 |
|   32 |   33 |
|   35 |   36 |
|   38 |   39 |
|   41 |   42 |
|   24 |   25 |
|   27 |   28 |
|   30 |   31 |
|   33 |   34 |
|   36 |   37 |
|   39 |   40 |
|   42 |   43 |
|   25 |   26 |
|   28 |   29 |
|   31 |   32 |
|   34 |   35 |
|   37 |   38 |
|   40 |   41 |
|   43 |   44 |
|   26 |   27 |
|   29 |   30 |
|   32 |   33 |
|   35 |   36 |
|   38 |   39 |
|   41 |   42 |
|   44 |   45 |
|   27 |   28 |
|   30 |   31 |
|   33 |   34 |
|   36 |   37 |
|   39 |   40 |
|   42 |   43 |
|   45 |   46 |
|   28 |   29 |
|   31 |   32 |
|   34 |   35 |
|   37 |   38 |
|   40 |   41 |
|   43 |   44 |
|   46 |   47 |
|   29 |   30 |
|   32 |   33 |
|   35 |   36 |
|   38 |   39 |
|   41 |   42 |
|   44 |   45 |
|   47 |   48 |
|   30 |   31 |
|   33 |   34 |
|   36 |   37 |
|   39 |   40 |
|   42 |   43 |
|   45 |   46 |
|   48 |   49 |
|   31 |   32 |
|   34 |   35 |
|   37 |   38 |
|   40 |   41 |
|   43 |   44 |
|   46 |   47 |
|   49 |   50 |
|   32 |   33 |
|   35 |   36 |
|   38 |   39 |
|   41 |   42 |
|   44 |   45 |
|   47 |   48 |
|   50 |   51 |
|   33 |   34 |
|   36 |   37 |
|   39 |   40 |
|   42 |   43 |
|   45 |   46 |
|   48 |   49 |
|   51 |   52 |
|   34 |   35 |
|   37 |   38 |
|   40 |   41 |
|   43 |   44 |
|   46 |   47 |
|   49 |   50 |
|   52 |   53 |
|   35 |   36 |
|   38 |   39 |
|   41 |   42 |
|   44 |   45 |
|   47 |   48 |
|   50 |   51 |
|   53 |   54 |
|   36 |   37 |
|   39 |   40 |
|   42 |   43 |
|   45 |   46 |
|   48 |   49 |
|   51 |   52 |
|   54 |   55 |
|   37 |   38 |
|   40 |   41 |
|   43 |   44 |
|   46 |   47 |
|   49 |   50 |
|   52 |   53 |
|   55 |   56 |
|   38 |   39 |
|   41 |   42 |
|   44 |   45 |
|   47 |   48 |
|   50 |   51 |
|   53 |   54 |
|   56 |   57 |
|   39 |   40 |
|   42 |   43 |
|   45 |   46 |
|   48 |   49 |
|   51 |   52 |
|   54 |   55 |
|   57 |   58 |
|   40 |   41 |
|   43 |   44 |
|   46 |   47 |
|   49 |   50 |
|   52 |   53 |
|   55 |   56 |
|   58 |   59 |
|   41 |   42 |
|   44 |   45 |
|   47 |   48 |
|   50 |   51 |
|   53 |   54 |
|   56 |   57 |
|   59 |   60 |
|   42 |   43 |
|   45 |   46 |
|   48 |   49 |
|   51 |   52 |
|   54 |   55 |
|   57 |   58 |
|   60 |   61 |
|   43 |   44 |
|   46 |   47 |
|   49 |   50 |
|   52 |   53 |
|   55 |   56 |
|   58 |   59 |
|   61 |   62 |
|   44 |   45 |
|   47 |   48 |
|   50 |   51 |
|   53 |   54 |
|   56 |   57 |
|   59 |   60 |
|   62 |   63 |
|   45 |   46 |
|   48 |   49 |
|   51 |   52 |
|   54 |   55 |
|   57 |   58 |
|   60 |   61 |
|   63 |   64 |
|   46 |   47 |
|   49 |   50 |
|   52 |   53 |
|   55 |   56 |
|   58 |   59 |
|   61 |   62 |
|   64 |   65 |
|   47 |   48 |
|   50 |   51 |
|   53 |   54 |
|   56 |   57 |
|   59 |   60 |
|   62 |   63 |
|   65 |   66 |
|   48 |   49 |
|   51 |   52 |
|   54 |   55 |
|   57 |   58 |
|   60 |   61 |
|   63 |   64 |
|   66 |   67 |
|   49 |   50 |
|   52 |   53 |
|   55 |   56 |
|   58 |   59 |
|   61 |   62 |
|   64 |   65 |
|   67 |   68 |
|   50 |   51 |
|   53 |   54 |
|   56 |   57 |
|   59 |   60 |
|   62 |   63 |
|   65 |   66 |
|   68 |   69 |
|   51 |   52 |
|   54 |   55 |
|   57 |   58 |
|   60 |   61 |
|   63 |   64 |
|   66 |   67 |
|   69 |   70 |
|   52 |   53 |
|   55 |   56 |
|   58 |   59 |
|   61 |   62 |
|   64 |   65 |
|   67 |   68 |
|   70 |   71 |
|   53 |   54 |
|   56 |   57 |
|   59 |   60 |
|   62 |   63 |
|   65 |   66 |
|   68 |   69 |
|   71 |   72 |
|   54 |   55 |
|   57 |   58 |
|   60 |   61 |
|   63 |   64 |
|   66 |   67 |
|   69 |   70 |
|   72 |   73 |
|   55 |   56 |
|   58 |   59 |
|   61 |   62 |
|   64 |   65 |
|   67 |   68 |
|   70 |   71 |
|   73 |   74 |
|   56 |   57 |
|   59 |   60 |
|   62 |   63 |
|   65 |   66 |
|   68 |   69 |
|   71 |   72 |
|   74 |   75 |
|   57 |   58 |
|   60 |   61 |
|   63 |   64 |
|   66 |   67 |
|   69 |   70 |
|   72 |   73 |
|   75 |   76 |
|   58 |   59 |
|   61 |   62 |
|   64 |   65 |
|   67 |   68 |
|   70 |   71 |
|   73 |   74 |
|   76 |   77 |
|   59 |   60 |
|   62 |   63 |
|   65 |   66 |
|   68 |   69 |
|   71 |   72 |
|   74 |   75 |
|   77 |   78 |
|   60 |   61 |
|   63 |   64 |
|   66 |   67 |
|   69 |   70 |
|   72 |   73 |
|   75 |   76 |
|   78 |   79 |
|   61 |   62 |
|   64 |   65 |
|   67 |   68 |
|   70 |   71 |
|   73 |   74 |
|   76 |   77 |
|   79 |   80 |
|   62 |   63 |
|   65 |   66 |
|   68 |   69 |
|   71 |   72 |
|   74 |   75 |
|   77 |   78 |
|   80 |   81 |
|   63 |   64 |
|   66 |   67 |
|   69 |   70 |
|   72 |   73 |
|   75 |   76 |
|   78 |   79 |
|   81 |   82 |
|   64 |   65 |
|   67 |   68 |
|   70 |   71 |
|   73 |   74 |
|   76 |   77 |
|   79 |   80 |
|   82 |   83 |
|   65 |   66 |
|   68 |   69 |
|   71 |   72 |
|   74 |   75 |
|   77 |   78 |
|   80 |   81 |
|   83 |   84 |
|   66 |   67 |
|   69 |   70 |
|   72 |   73 |
|   75 |   76 |
|   78 |   79 |
|   81 |   82 |
|   84 |   85 |
|   67 |   68 |
|   70 |   71 |
|   73 |   74 |
|   76 |   77 |
|   79 |   80 |
|   82 |   83 |
|   85 |   86 |
|   68 |   69 |
|   71 |   72 |
|   74 |   75 |
|   77 |   78 |
|   80 |   81 |
|   83 |   84 |
|   86 |   87 |
|   69 |   70 |
|   72 |   73 |
|   75 |   76 |
|   78 |   79 |
|   81 |   82 |
|   84 |   85 |
|   87 |   88 |
|   70 |   71 |
|   73 |   74 |
|   76 |   77 |
|   79 |   80 |
|   82 |   83 |
|   85 |   86 |
|   88 |   89 |
|   71 |   72 |
|   74 |   75 |
|   77 |   78 |
|   80 |   81 |
|   83 |   84 |
|   86 |   87 |
|   89 |   90 |
|   72 |   73 |
|   75 |   76 |
|   78 |   79 |
|   81 |   82 |
|   84 |   85 |
|   87 |   88 |
|   90 |   91 |
|   73 |   74 |
|   76 |   77 |
|   79 |   80 |
|   82 |   83 |
|   85 |   86 |
|   88 |   89 |
|   91 |   92 |
|   74 |   75 |
|   77 |   78 |
|   80 |   81 |
|   83 |   84 |
|   86 |   87 |
|   89 |   90 |
|   92 |   93 |
|   75 |   76 |
|   78 |   79 |
|   81 |   82 |
|   84 |   85 |
|   87 |   88 |
|   90 |   91 |
|   93 |   94 |
|   76 |   77 |
|   79 |   80 |
|   82 |   83 |
|   85 |   86 |
|   88 |   89 |
|   91 |   92 |
|   94 |   95 |
|   77 |   78 |
|   80 |   81 |
|   83 |   84 |
|   86 |   87 |
|   89 |   90 |
|   92 |   93 |
|   95 |   96 |
|   78 |   79 |
|   81 |   82 |
|   84 |   85 |
|   87 |   88 |
|   90 |   91 |
|   93 |   94 |
|   96 |   97 |
|   79 |   80 |
|   82 |   83 |
|   85 |   86 |
|   88 |   89 |
|   91 |   92 |
|   94 |   95 |
|   97 |   98 |
|   80 |   81 |
|   83 |   84 |
|   86 |   87 |
|   89 |   90 |
|   92 |   93 |
|   95 |   96 |
|   98 |   99 |
|   81 |   82 |
|   84 |   85 |
|   87 |   88 |
|   90 |   91 |
|   93 |   94 |
|   96 |   97 |
|   99 |  100 |
|   82 |   83 |
|   85 |   86 |
|   88 |   89 |
|   91 |   92 |
|   94 |   95 |
|   97 |   98 |
|  100 |  101 |
|   83 |   84 |
|   86 |   87 |
|   89 |   90 |
|   92 |   93 |
|   95 |   96 |
|   98 |   99 |
|   84 |   85 |
|   87 |   88 |
|   90 |   91 |
|   93 |   94 |
|   96 |   97 |
|   99 |  100 |
|   85 |   86 |
|   88 |   89 |
|   91 |   92 |
|   94 |   95 |
|   97 |   98 |
|  100 |  101 |
|   86 |   87 |
|   89 |   90 |
|   92 |   93 |
|   95 |   96 |
|   98 |   99 |
|   87 |   88 |
|   90 |   91 |
|   93 |   94 |
|   96 |   97 |
|   99 |  100 |
|   88 |   89 |
|   91 |   92 |
|   94 |   95 |
|   97 |   98 |
|  100 |  101 |
|   89 |   90 |
|   92 |   93 |
|   95 |   96 |
|   98 |   99 |
|   90 |   91 |
|   93 |   94 |
|   96 |   97 |
|   99 |  100 |
|   91 |   92 |
|   94 |   95 |
|   97 |   98 |
|  100 |  101 |
|   92 |   93 |
|   95 |   96 |
|   98 |   99 |
|   93 |   94 |
|   96 |   97 |
|   99 |  100 |
|   94 |   95 |
|   97 |   98 |
|  100 |  101 |
|   95 |   96 |
|   98 |   99 |
|   96 |   97 |
|   99 |  100 |
|   97 |   98 |
|  100 |  101 |
|   98 |   99 |
|   99 |  100 |
|  100 |  101 |
+------+------+

##   PART 3.2.3 测试能不能正确解析普通的union all
with RECURSIVE cte(a) as (select 1 from dual union all select 2 from dual), cte_1(b) as (select 1 from dual union all select * from cte) select * from cte_1;
+------+
| b    |
+------+
|    1 |
|    1 |
|    2 |
+------+

##############################
##   PART 4 subquery的变化
##############################
##   PART 4.1.0 subquery的变化(限制)
##   递归的句式主要变化在左支可以很负责，右支作join的的表可以是子查询，这个子查询可以写的
##   非常的复杂
##   递归cte只能有两个入口
with RECURSIVE cte(n) AS (select 1 from dual UNION ALL select n+1 from cte where n < 3 UNION ALL select 2 from dual) select * from cte;
ERROR HY000: UNION ALL operation in recursive WITH clause must have only two branches

## 递归必须包含union all
with RECURSIVE cte(n) AS ( select 1 from cte) select * from cte;
ERROR HY000: recursive WITH clause must use a UNION ALL operation

set @@ob_query_timeout=1000000;
with RECURSIVE cte(n) AS ( select 1 from dual UNION ALL select sum(n+1) from cte) select * from cte;
ERROR HY000: Recursive Common Table Expression can contain neither aggregation nor window functions in recursive query block

set @@ob_query_timeout=10000000;

##递归查询只允许有两个入口
with RECURSIVE cte(n) AS (select 1 from dual UNION ALL select n+1 from cte where n < 3 union all select n+1 from cte where n < 2) select * from cte;
ERROR HY000: UNION ALL operation in recursive WITH clause must have only two branches

with RECURSIVE cte(n) as (select 1 from dual union all select c1 from t1 union all (with RECURSIVE cte(n) as (select c1 from t1) select * from cte)) select * from cte;
ERROR HY000: cycle detected while executing recursive WITH query

with RECURSIVE cte(n) as (select n from (select 1 from dual union all select n+1 from cte) tmp) select * from cte;
ERROR HY000: In recursive query block of Recursive Common Table Expression, the recursive table must be referenced only once, and not in any subquery

## 不能出现在right join的左边，left join的右边，full join的两边
with RECURSIVE cte(n) AS (select c1 from t1 UNION ALL select n+1 from cte right join t2 on cte.n < 3 and t2.c1 < 22) select * from cte;
ERROR HY000: In recursive query block of Recursive Common Table Expression, the recursive table must neither be in the right argument of a LEFT JOIN, nor be forced to be non-first with join order hints
with RECURSIVE cte(n) AS (select c1 from t1 UNION ALL select n+1 from t2 left join cte on cte.n < 3 and t2.c1 < 22) select * from cte;
ERROR HY000: In recursive query block of Recursive Common Table Expression, the recursive table must neither be in the right argument of a LEFT JOIN, nor be forced to be non-first with join order hints
with RECURSIVE cte(n) AS (select c1 from t1 UNION ALL select n+1 from t2 full join cte on cte.n < 3 and t2.c1 < 22) select * from cte;
ERROR HY000: In recursive query block of Recursive Common Table Expression, the recursive table must neither be in the right argument of a LEFT JOIN, nor be forced to be non-first with join order hints
with RECURSIVE cte(n) AS (select c1 from t1 UNION ALL select n+1 from cte full join t2 on cte.n < 3 and t2.c1 < 22) select * from cte;
ERROR HY000: In recursive query block of Recursive Common Table Expression, the recursive table must neither be in the right argument of a LEFT JOIN, nor be forced to be non-first with join order hints
set @@ob_query_timeout=10000000;

##   PART 4.2 左支不停的变化
##   带有where
with RECURSIVE
  cte2(c,d) AS (SELECT c1,c2 from t1 where c1 < 3 union all select c+1, d+1 from cte2 where c < 10)
select c,d from cte2;
+------+------+
| c    | d    |
+------+------+
|    1 |    2 |
|    2 |    3 |
|    3 |    4 |
|    4 |    5 |
|    5 |    6 |
|    6 |    7 |
|    7 |    8 |
|    8 |    9 |
|    9 |   10 |
|   10 |   11 |
+------+------+

with RECURSIVE
  cte2(c,d) AS (SELECT c1,c2 from t1 where c1+'1' <= 3 union all select c+1, d+1 from cte2 where c < 10)
select c,d from cte2;
+------+------+
| c    | d    |
+------+------+
|    1 |    2 |
|    2 |    3 |
|    3 |    4 |
|    4 |    5 |
|    5 |    6 |
|    6 |    7 |
|    7 |    8 |
|    8 |    9 |
|    9 |   10 |
|   10 |   11 |
+------+------+

##   带有group
with RECURSIVE
  cte2(c,d) AS (SELECT c1,c2 from t1 group by c1,c2 union all select c+1, d+1 from cte2 where c < 10)
select c,d from cte2;
+------+------+
| c    | d    |
+------+------+
|    1 |    2 |
|    4 |    5 |
|    7 |    8 |
|   10 |   11 |
|   13 |   14 |
|   16 |   17 |
|   19 |   20 |
|    2 |    3 |
|    5 |    6 |
|    8 |    9 |
|    3 |    4 |
|    6 |    7 |
|    9 |   10 |
|    4 |    5 |
|    7 |    8 |
|   10 |   11 |
|    5 |    6 |
|    8 |    9 |
|    6 |    7 |
|    9 |   10 |
|    7 |    8 |
|   10 |   11 |
|    8 |    9 |
|    9 |   10 |
|   10 |   11 |
+------+------+

##   带有having
with RECURSIVE
  cte2(c,d) AS (SELECT c1,c2 from t1 where t1.c1 > 5 union all select c+1, d+1 from cte2 where c < 30)
select c,d from cte2;
+------+------+
| c    | d    |
+------+------+
|    7 |    8 |
|   10 |   11 |
|   13 |   14 |
|   16 |   17 |
|   19 |   20 |
|    8 |    9 |
|   11 |   12 |
|   14 |   15 |
|   17 |   18 |
|   20 |   21 |
|    9 |   10 |
|   12 |   13 |
|   15 |   16 |
|   18 |   19 |
|   21 |   22 |
|   10 |   11 |
|   13 |   14 |
|   16 |   17 |
|   19 |   20 |
|   22 |   23 |
|   11 |   12 |
|   14 |   15 |
|   17 |   18 |
|   20 |   21 |
|   23 |   24 |
|   12 |   13 |
|   15 |   16 |
|   18 |   19 |
|   21 |   22 |
|   24 |   25 |
|   13 |   14 |
|   16 |   17 |
|   19 |   20 |
|   22 |   23 |
|   25 |   26 |
|   14 |   15 |
|   17 |   18 |
|   20 |   21 |
|   23 |   24 |
|   26 |   27 |
|   15 |   16 |
|   18 |   19 |
|   21 |   22 |
|   24 |   25 |
|   27 |   28 |
|   16 |   17 |
|   19 |   20 |
|   22 |   23 |
|   25 |   26 |
|   28 |   29 |
|   17 |   18 |
|   20 |   21 |
|   23 |   24 |
|   26 |   27 |
|   29 |   30 |
|   18 |   19 |
|   21 |   22 |
|   24 |   25 |
|   27 |   28 |
|   30 |   31 |
|   19 |   20 |
|   22 |   23 |
|   25 |   26 |
|   28 |   29 |
|   20 |   21 |
|   23 |   24 |
|   26 |   27 |
|   29 |   30 |
|   21 |   22 |
|   24 |   25 |
|   27 |   28 |
|   30 |   31 |
|   22 |   23 |
|   25 |   26 |
|   28 |   29 |
|   23 |   24 |
|   26 |   27 |
|   29 |   30 |
|   24 |   25 |
|   27 |   28 |
|   30 |   31 |
|   25 |   26 |
|   28 |   29 |
|   26 |   27 |
|   29 |   30 |
|   27 |   28 |
|   30 |   31 |
|   28 |   29 |
|   29 |   30 |
|   30 |   31 |
+------+------+

##   带有order
with RECURSIVE
  cte2(c,d) AS ( select c1, c2 + 1 as c3 from t1 order by c2 union all select c+1, d+1 from cte2 where c < 30)
select c,d from cte2;
+------+------+
| c    | d    |
+------+------+
|    1 |    3 |
|    4 |    6 |
|    7 |    9 |
|   10 |   12 |
|   13 |   15 |
|   16 |   18 |
|   19 |   21 |
|    2 |    4 |
|    5 |    7 |
|    8 |   10 |
|   11 |   13 |
|   14 |   16 |
|   17 |   19 |
|   20 |   22 |
|    3 |    5 |
|    6 |    8 |
|    9 |   11 |
|   12 |   14 |
|   15 |   17 |
|   18 |   20 |
|   21 |   23 |
|    4 |    6 |
|    7 |    9 |
|   10 |   12 |
|   13 |   15 |
|   16 |   18 |
|   19 |   21 |
|   22 |   24 |
|    5 |    7 |
|    8 |   10 |
|   11 |   13 |
|   14 |   16 |
|   17 |   19 |
|   20 |   22 |
|   23 |   25 |
|    6 |    8 |
|    9 |   11 |
|   12 |   14 |
|   15 |   17 |
|   18 |   20 |
|   21 |   23 |
|   24 |   26 |
|    7 |    9 |
|   10 |   12 |
|   13 |   15 |
|   16 |   18 |
|   19 |   21 |
|   22 |   24 |
|   25 |   27 |
|    8 |   10 |
|   11 |   13 |
|   14 |   16 |
|   17 |   19 |
|   20 |   22 |
|   23 |   25 |
|   26 |   28 |
|    9 |   11 |
|   12 |   14 |
|   15 |   17 |
|   18 |   20 |
|   21 |   23 |
|   24 |   26 |
|   27 |   29 |
|   10 |   12 |
|   13 |   15 |
|   16 |   18 |
|   19 |   21 |
|   22 |   24 |
|   25 |   27 |
|   28 |   30 |
|   11 |   13 |
|   14 |   16 |
|   17 |   19 |
|   20 |   22 |
|   23 |   25 |
|   26 |   28 |
|   29 |   31 |
|   12 |   14 |
|   15 |   17 |
|   18 |   20 |
|   21 |   23 |
|   24 |   26 |
|   27 |   29 |
|   30 |   32 |
|   13 |   15 |
|   16 |   18 |
|   19 |   21 |
|   22 |   24 |
|   25 |   27 |
|   28 |   30 |
|   14 |   16 |
|   17 |   19 |
|   20 |   22 |
|   23 |   25 |
|   26 |   28 |
|   29 |   31 |
|   15 |   17 |
|   18 |   20 |
|   21 |   23 |
|   24 |   26 |
|   27 |   29 |
|   30 |   32 |
|   16 |   18 |
|   19 |   21 |
|   22 |   24 |
|   25 |   27 |
|   28 |   30 |
|   17 |   19 |
|   20 |   22 |
|   23 |   25 |
|   26 |   28 |
|   29 |   31 |
|   18 |   20 |
|   21 |   23 |
|   24 |   26 |
|   27 |   29 |
|   30 |   32 |
|   19 |   21 |
|   22 |   24 |
|   25 |   27 |
|   28 |   30 |
|   20 |   22 |
|   23 |   25 |
|   26 |   28 |
|   29 |   31 |
|   21 |   23 |
|   24 |   26 |
|   27 |   29 |
|   30 |   32 |
|   22 |   24 |
|   25 |   27 |
|   28 |   30 |
|   23 |   25 |
|   26 |   28 |
|   29 |   31 |
|   24 |   26 |
|   27 |   29 |
|   30 |   32 |
|   25 |   27 |
|   28 |   30 |
|   26 |   28 |
|   29 |   31 |
|   27 |   29 |
|   30 |   32 |
|   28 |   30 |
|   29 |   31 |
|   30 |   32 |
+------+------+

with RECURSIVE
  cte2(c,d) AS (select t1.c1, t2.c2 from t1 left join t2 on t1.c1=t2.c1 order by t1.c1 union all select c+1, d+1 from cte2 where c < 30)
select c from cte2;
+------+
| c    |
+------+
|    1 |
|    4 |
|    7 |
|   10 |
|   13 |
|   16 |
|   19 |
|    2 |
|    5 |
|    8 |
|   11 |
|   14 |
|   17 |
|   20 |
|    3 |
|    6 |
|    9 |
|   12 |
|   15 |
|   18 |
|   21 |
|    4 |
|    7 |
|   10 |
|   13 |
|   16 |
|   19 |
|   22 |
|    5 |
|    8 |
|   11 |
|   14 |
|   17 |
|   20 |
|   23 |
|    6 |
|    9 |
|   12 |
|   15 |
|   18 |
|   21 |
|   24 |
|    7 |
|   10 |
|   13 |
|   16 |
|   19 |
|   22 |
|   25 |
|    8 |
|   11 |
|   14 |
|   17 |
|   20 |
|   23 |
|   26 |
|    9 |
|   12 |
|   15 |
|   18 |
|   21 |
|   24 |
|   27 |
|   10 |
|   13 |
|   16 |
|   19 |
|   22 |
|   25 |
|   28 |
|   11 |
|   14 |
|   17 |
|   20 |
|   23 |
|   26 |
|   29 |
|   12 |
|   15 |
|   18 |
|   21 |
|   24 |
|   27 |
|   30 |
|   13 |
|   16 |
|   19 |
|   22 |
|   25 |
|   28 |
|   14 |
|   17 |
|   20 |
|   23 |
|   26 |
|   29 |
|   15 |
|   18 |
|   21 |
|   24 |
|   27 |
|   30 |
|   16 |
|   19 |
|   22 |
|   25 |
|   28 |
|   17 |
|   20 |
|   23 |
|   26 |
|   29 |
|   18 |
|   21 |
|   24 |
|   27 |
|   30 |
|   19 |
|   22 |
|   25 |
|   28 |
|   20 |
|   23 |
|   26 |
|   29 |
|   21 |
|   24 |
|   27 |
|   30 |
|   22 |
|   25 |
|   28 |
|   23 |
|   26 |
|   29 |
|   24 |
|   27 |
|   30 |
|   25 |
|   28 |
|   26 |
|   29 |
|   27 |
|   30 |
|   28 |
|   29 |
|   30 |
+------+

##   PART 4.3 右支不停的变化
with RECURSIVE
  cte(c,d) AS (SELECT c1,c2 from t1 where c1 < 3 union all select c+1, d+1 from cte, t2 where t2.c1 = c and t2.c2 > some (select c1 from t44 t99 group by c1))
select * from cte;
+------+------+
| c    | d    |
+------+------+
|    1 |    2 |
+------+------+

with RECURSIVE
  cte(c,d) AS (SELECT c1,c2 from t1 where c1 < 3 union all select c+1, d+1 from cte, t2 where t2.c1 = c and t2.c2 > some (select c1 from t44 t99 group by c1))
select * from cte;
+------+------+
| c    | d    |
+------+------+
|    1 |    2 |
+------+------+

create table ex (c1 int, c2 int);

with RECURSIVE ex(c1, c2) as (select 1, 1 from dual union all select c1+1, c2+1 from ex where c1 < 5) select * from ex;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
+------+------+

with RECURSIVE ex(c1, c2) as (select 1, 1 from dual union all select c1+1, c2+1 from ex where c1 < 5) select * from ex;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
+------+------+

##############################
##   section two cte的使用
##############################
##   PART 0 cte结果正确性验证
##   基础case
with RECURSIVE cte(n) as (select 1 from dual union all select n+1 from cte where n < 23) select n from cte;
+------+
| n    |
+------+
|    1 |
|    2 |
|    3 |
|    4 |
|    5 |
|    6 |
|    7 |
|    8 |
|    9 |
|   10 |
|   11 |
|   12 |
|   13 |
|   14 |
|   15 |
|   16 |
|   17 |
|   18 |
|   19 |
|   20 |
|   21 |
|   22 |
|   23 |
+------+

with RECURSIVE cte (a,b,c) as  (     select id, name, leaderid from emp where emp.id = 1     union all     select emp.id ,emp.name, emp.leaderid from emp, cte where emp.leaderid = cte.a )  select * from cte;
+------+------+------+
| a    | b    | c    |
+------+------+------+
|    1 | A    |    0 |
|    3 | AB   |    1 |
|    2 | AA   |    1 |
|    6 | ABB  |    3 |
|    4 | ABA  |    3 |
|    5 | AAA  |    2 |
|   12 | AAAA |    5 |
|   11 | AAAC |    5 |
|   10 | AAAB |    5 |
|    9 | AAAA |    5 |
|    7 | AAA  |    5 |
|    8 | AAA  |    7 |
+------+------+------+

##   与MySQL结果进行核对，验证正确性，句式1
with RECURSIVE cte( id, val, lev) as (
  select id, value , 0 as lev from t4 where parent_id is null
  union all
  select t4.id, t4.value, cte.lev+1 from cte join t4 on t4.parent_id=cte.id)
select * from cte;
+------+------+------+
| id   | val  | lev  |
+------+------+------+
|    1 | A    |    0 |
|    4 | D    |    1 |
|    3 | C    |    1 |
|    2 | B    |    1 |
|    7 | G    |    2 |
|    6 | F    |    2 |
|    5 | E    |    2 |
|    8 | H    |    3 |
+------+------+------+

##   与MySQL结果进行核对，验证正确性，句式3
with RECURSIVE cte(a,b,c) as
(
  select c1,c2,c3 from t1 where t1.c1 < 20
  union all
  select c1,c2,c3 from t1, cte where cte.a = t1.c1 and cte.c < 10
) select * from cte;
ERROR HY000: cycle detected while executing recursive WITH query

##   与MySQL结果进行核对，验证正确性，句式4
with RECURSIVE cte (a,b,c) as
(
  select id, name, leaderid from emp where emp.id = 1
  union all
  select emp.id ,emp.name, emp.leaderid from emp, cte where emp.leaderid = cte.a
)
select * from cte;
+------+------+------+
| a    | b    | c    |
+------+------+------+
|    1 | A    |    0 |
|    3 | AB   |    1 |
|    2 | AA   |    1 |
|    6 | ABB  |    3 |
|    4 | ABA  |    3 |
|    5 | AAA  |    2 |
|   12 | AAAA |    5 |
|   11 | AAAC |    5 |
|   10 | AAAB |    5 |
|    9 | AAAA |    5 |
|    7 | AAA  |    5 |
|    8 | AAA  |    7 |
+------+------+------+

##    join hint
with RECURSIVE cte(n) as
(
  select /*+NO_USE_HASH(t1,t2)*/ t1.c1 from t1, t2 where t1.c1 = t2.c1
  union all
  select t1.c1 from cte, t1 where t1.c1 = cte.n
)
select * from cte;
ERROR HY000: cycle detected while executing recursive WITH query

with RECURSIVE cte(a,b,c) as
(
  select c1,c2,c3 from t1 where t1.c1 < 20
  union all
  select c1,c2,c3 from t1, cte where cte.a = t1.c1 and cte.c < 10)
select count(distinct cte.a), avg(distinct cte.b) from cte where cte.c < 10;
ERROR HY000: cycle detected while executing recursive WITH query


##   PART 1 cte出现在normal型查询语句中
##   PART 1.1 最基本用法(单表)
##   最简单的使用方法
with RECURSIVE cte as (select * from t1) select (
with RECURSIVE cte(col1, col2, col3) as(select * from t2) select count(*) from cte
) from t1;
+----------------------------------------------------------------------------------------+
| (
with RECURSIVE cte(col1, col2, col3) as(select * from t2) select count(*) from cte
) |
+----------------------------------------------------------------------------------------+
|                                                                                      5 |
|                                                                                      5 |
|                                                                                      5 |
|                                                                                      5 |
|                                                                                      5 |
|                                                                                      5 |
|                                                                                      5 |
+----------------------------------------------------------------------------------------+

with RECURSIVE cte(a,b,c) as
(
select c1,c2,c3 from t1 where t1.c1 < 20
union all
select c1,c2,c3 from t1, cte where cte.a = t1.c1 and cte.c < 10
)
select a, b, c from cte;
ERROR HY000: cycle detected while executing recursive WITH query

##   主句含有order + 对伪列排序序
with RECURSIVE cte(a,b,c) as
(
select c1,c2,c3 from t1 where t1.c1 < 20
union all
select c1,c2,c3 from t1, cte where cte.a = t1.c1 and cte.c < 10
)
select a, b, c from cte order by a;
ERROR HY000: cycle detected while executing recursive WITH query

##   对主句中的cte取别名后看看能否继续使用+在in中使用+where
with RECURSIVE cte(a,b,c) as
(
select c1,c2,c3 from t1 where t1.c1 < 20
union all
select c1,c2,c3 from t1, cte where cte.a = t1.c1 and cte.c < 10
)
select z1.a from cte z1, t2 where z1.a in (1,4,7,11) and z1.a = t2.c2;
ERROR HY000: cycle detected while executing recursive WITH query

##   重命名的列出现在order+where中
with RECURSIVE cte(a,b,c) as
(
select c1,c2,c3 from t1 where t1.c1 < 20
union all
select c1,c2,c3 from t1, cte where cte.a = t1.c1 and cte.c < 10
)
select a from cte where a in (1,4,11) order by a;
ERROR HY000: cycle detected while executing recursive WITH query

##   别名列和原本列的名字一样
with RECURSIVE cte(c1,c2,c3) as
(
select c1,c2,c3 from t1 where t1.c1 < 20
union all
select c1,c2,c3 from t1, cte where cte.c1 = t1.c1 and cte.c3 < 10
)
select c2 from cte;
ERROR 23000: Column 'c1' in field list is ambiguous

##   在field list中写了inline，里面使用了cte
with RECURSIVE cte(n) as (select 1 from dual union all select n+1 from cte where n < 23) select (select count(*) from cte) from cte;
+----------------------------+
| (select count(*) from cte) |
+----------------------------+
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
|                         23 |
+----------------------------+

##   join＋having not＋order by
with RECURSIVE cte1(a,b,c) as
(
select c1,c2,c3 from t1 where t1.c1 < 20
union all
select c1,c2,c3 from t1, cte1 cte where cte.a = t1.c1 and cte.c < 10
)
select * from cte1 left join t2 on cte1.a=t2.c1 where t2.c1 != cte1.a order by cte1.a;
ERROR HY000: cycle detected while executing recursive WITH query


##   PART 1.2 最基本用法(多表)
##   第三cte引用第二个，第二个又引用第一个。结果与MySQL一致。
explain basic
with RECURSIVE cte1(a,b,c) as
(
select 1,1,1 from dual
union all
select a+1,b+1,c+1 from cte1 where cte1.a < 10
),
cte2 (a,b,c) as
(
select cte1.a,cte1.b,cte1.c from cte1
union all
select a+1,b+1,c+1 from cte2 where cte2.a < 10
),
cte3 (a,b,c) as
(
select cte2.a,cte2.b,cte2.c from cte2
union all
select cte3.a+1,cte3.b+1,cte3.c+1 from cte3, cte2 where cte2.a < 3 and cte3.a < cte2.b and cte3.a < 10
)
SELECT cte1.a, cte1.b FROM cte1 JOIN cte3
on cte1.a < cte3.c;
Query Plan
===========================================
|ID|OPERATOR                         |NAME|
-------------------------------------------
|0 |NESTED-LOOP JOIN                 |    |
|1 |├─SUBPLAN SCAN                   |cte3|
|2 |│ └─RECURSIVE UNION ALL          |    |
|3 |│   ├─RECURSIVE UNION ALL        |    |
|4 |│   │ ├─RECURSIVE UNION ALL      |    |
|5 |│   │ │ ├─EXPRESSION             |    |
|6 |│   │ │ └─TABLE FULL SCAN        |cte1|
|7 |│   │ └─TABLE FULL SCAN          |cte2|
|8 |│   └─NESTED-LOOP JOIN           |    |
|9 |│     ├─TABLE FULL SCAN          |cte3|
|10|│     └─MATERIAL                 |    |
|11|│       └─SUBPLAN SCAN           |cte2|
|12|│         └─RECURSIVE UNION ALL  |    |
|13|│           ├─RECURSIVE UNION ALL|    |
|14|│           │ ├─EXPRESSION       |    |
|15|│           │ └─TABLE FULL SCAN  |cte1|
|16|│           └─TABLE FULL SCAN    |cte2|
|17|└─MATERIAL                       |    |
|18|  └─SUBPLAN SCAN                 |cte1|
|19|    └─RECURSIVE UNION ALL        |    |
|20|      ├─EXPRESSION               |    |
|21|      └─TABLE FULL SCAN          |cte1|
===========================================
Outputs & filters:
-------------------------------------
  0 - output([cte1.a], [cte1.b]), filter(nil), rowset=256
      conds([cte1.a < cte3.c]), nl_params_(nil), use_batch=false
  1 - output([cte3.c]), filter(nil), rowset=256
      access([cte3.c])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil), rowset=256
  3 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil), rowset=256
  4 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil), rowset=256
  5 - output([1], [1], [1]), filter(nil)
      values({1, 1, 1})
  6 - output([cte1.a + 1], [cte1.b + 1], [cte1.c + 1]), filter([cte1.a < 10]), rowset=256
      access([cte1.a], [cte1.b], [cte1.c])
      is_index_back=false, is_global_index=false, filter_before_indexback[false],
      range_key(nil), range(MIN ; MAX)
  7 - output([cte2.a + 1], [cte2.b + 1], [cte2.c + 1]), filter([cte2.a < 10]), rowset=256
      access([cte2.a], [cte2.b], [cte2.c])
      is_index_back=false, is_global_index=false, filter_before_indexback[false],
      range_key(nil), range(MIN ; MAX)
  8 - output([cte3.a + 1], [cte3.b + 1], [cte3.c + 1]), filter(nil), rowset=256
      conds([cte3.a < cte2.b]), nl_params_(nil), use_batch=false
  9 - output([cte3.a], [cte3.b], [cte3.c]), filter([cte3.a < 10]), rowset=256
      access([cte3.a], [cte3.b], [cte3.c])
      is_index_back=false, is_global_index=false, filter_before_indexback[false],
      range_key(nil), range(MIN ; MAX)
 10 - output([cte2.b]), filter(nil), rowset=256
 11 - output([cte2.b]), filter([cte2.a < 3]), rowset=256
      access([cte2.a], [cte2.b])
 12 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil), rowset=256
 13 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil), rowset=256
 14 - output([1], [1], [1]), filter(nil)
      values({1, 1, 1})
 15 - output([cte1.a + 1], [cte1.b + 1], [cte1.c + 1]), filter([cte1.a < 10]), rowset=256
      access([cte1.a], [cte1.b], [cte1.c])
      is_index_back=false, is_global_index=false, filter_before_indexback[false],
      range_key(nil), range(MIN ; MAX)
 16 - output([cte2.a + 1], [cte2.b + 1], [cte2.c + 1]), filter([cte2.a < 10]), rowset=256
      access([cte2.a], [cte2.b], [cte2.c])
      is_index_back=false, is_global_index=false, filter_before_indexback[false],
      range_key(nil), range(MIN ; MAX)
 17 - output([cte1.a], [cte1.b]), filter(nil), rowset=256
 18 - output([cte1.a], [cte1.b]), filter(nil), rowset=256
      access([cte1.a], [cte1.b])
 19 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil), rowset=256
 20 - output([1], [1], [1]), filter(nil)
      values({1, 1, 1})
 21 - output([cte1.a + 1], [cte1.b + 1], [cte1.c + 1]), filter([cte1.a < 10]), rowset=256
      access([cte1.a], [cte1.b], [cte1.c])
      is_index_back=false, is_global_index=false, filter_before_indexback[false],
      range_key(nil), range(MIN ; MAX)

set ob_query_timeout = 100000000;
with RECURSIVE cte1(a,b,c) as
(
select 1,1,1 from dual
union all
select a+1,b+1,c+1 from cte1 where cte1.a < 10
),
cte2 (a,b,c) as
(
select cte1.a,cte1.b,cte1.c from cte1
union all
select a+1,b+1,c+1 from cte2 where cte2.a < 10
),
cte3 (a,b,c) as
(
select cte2.a,cte2.b,cte2.c from cte2
union all
select cte3.a+1,cte3.b+1,cte3.c+1 from cte3, cte2 where cte2.a < 3 and cte3.a < cte2.b and cte3.a < 10
)
SELECT cte1.a, cte1.b FROM cte1 JOIN cte3
on cte1.a < cte3.c;
+------+------+
| a    | b    |
+------+------+
|    1 |    1 |
|    1 |    1 |
|    2 |    2 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    9 |    9 |
|    1 |    1 |
|    1 |    1 |
|    2 |    2 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    9 |    9 |
|    1 |    1 |
|    2 |    2 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    9 |    9 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    9 |    9 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    9 |    9 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    9 |    9 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    9 |    9 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    9 |    9 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    9 |    9 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
|    8 |    8 |
|    9 |    9 |
|    1 |    1 |
|    1 |    1 |
+------+------+
set ob_query_timeout = 10000000;

##    关于数学的复杂case
##about math
with RECURSIVE fibonacci (n, fib_n, next_fib_n) AS
(
  SELECT 1, 0, 1 from dual
  UNION ALL
  SELECT n + 1, next_fib_n, fib_n + next_fib_n
  FROM fibonacci WHERE n < 10
)
SELECT * FROM fibonacci;
+------+-------+------------+
| n    | fib_n | next_fib_n |
+------+-------+------------+
|    1 |     0 |          1 |
|    2 |     1 |          1 |
|    3 |     1 |          2 |
|    4 |     2 |          3 |
|    5 |     3 |          5 |
|    6 |     5 |          8 |
|    7 |     8 |         13 |
|    8 |    13 |         21 |
|    9 |    21 |         34 |
|   10 |    34 |         55 |
+------+-------+------------+

with RECURSIVE cte(n) as (select 1 from dual union all select n+1 from cte where n<6),
     prod(lastnum, lastprod) as (select min(n), min(n) from cte
          union all
          select n, n*lastprod from cte, prod where n = prod.lastnum+1)
select * from prod;
+---------+----------+
| lastnum | lastprod |
+---------+----------+
|       1 |        1 |
|       2 |        2 |
|       3 |        6 |
|       4 |       24 |
|       5 |      120 |
|       6 |      720 |
+---------+----------+

with RECURSIVE cte as (select 18 d from dual),
     prod (lastnum, lastprod) as (
          select 1, 1 from dual
          union all
          select lastnum+1, (lastnum+1)*lastprod from prod, cte where lastnum < d)
select * from prod, cte where lastnum = d;
+---------+------------------+----+
| lastnum | lastprod         | d  |
+---------+------------------+----+
|      18 | 6402373705728000 | 18 |
+---------+------------------+----+


##############################
##    insert into
##############################
insert into insert_t with RECURSIVE cte(a,b,c) as (select 1,2,3 from dual union all select a+1,b+1,c+1 from cte where a < 10) SELECT * FROM cte;
select * from insert_t;
+------+------+------+
| c1   | c2   | c3   |
+------+------+------+
|    1 |    2 |    3 |
|    2 |    3 |    4 |
|    3 |    4 |    5 |
|    4 |    5 |    6 |
|    5 |    6 |    7 |
|    6 |    7 |    8 |
|    7 |    8 |    9 |
|    8 |    9 |   10 |
|    9 |   10 |   11 |
|   10 |   11 |   12 |
+------+------+------+

##############################
##    select when
##############################
with RECURSIVE cte(c1, c2, c3) as (select 1,1,1 from dual union all select c1+1,c2+1,c3+1 from cte where cte.c1 < 50) select c1, max(c2), CASE max(c2) when 4 then 4 when 43 then 43 else 1 end from cte group by c1 order by c1;
+------+---------+-------------------------------------------------------+
| c1   | max(c2) | CASE max(c2) when 4 then 4 when 43 then 43 else 1 end |
+------+---------+-------------------------------------------------------+
|    1 |       1 |                                                     1 |
|    2 |       2 |                                                     1 |
|    3 |       3 |                                                     1 |
|    4 |       4 |                                                     4 |
|    5 |       5 |                                                     1 |
|    6 |       6 |                                                     1 |
|    7 |       7 |                                                     1 |
|    8 |       8 |                                                     1 |
|    9 |       9 |                                                     1 |
|   10 |      10 |                                                     1 |
|   11 |      11 |                                                     1 |
|   12 |      12 |                                                     1 |
|   13 |      13 |                                                     1 |
|   14 |      14 |                                                     1 |
|   15 |      15 |                                                     1 |
|   16 |      16 |                                                     1 |
|   17 |      17 |                                                     1 |
|   18 |      18 |                                                     1 |
|   19 |      19 |                                                     1 |
|   20 |      20 |                                                     1 |
|   21 |      21 |                                                     1 |
|   22 |      22 |                                                     1 |
|   23 |      23 |                                                     1 |
|   24 |      24 |                                                     1 |
|   25 |      25 |                                                     1 |
|   26 |      26 |                                                     1 |
|   27 |      27 |                                                     1 |
|   28 |      28 |                                                     1 |
|   29 |      29 |                                                     1 |
|   30 |      30 |                                                     1 |
|   31 |      31 |                                                     1 |
|   32 |      32 |                                                     1 |
|   33 |      33 |                                                     1 |
|   34 |      34 |                                                     1 |
|   35 |      35 |                                                     1 |
|   36 |      36 |                                                     1 |
|   37 |      37 |                                                     1 |
|   38 |      38 |                                                     1 |
|   39 |      39 |                                                     1 |
|   40 |      40 |                                                     1 |
|   41 |      41 |                                                     1 |
|   42 |      42 |                                                     1 |
|   43 |      43 |                                                    43 |
|   44 |      44 |                                                     1 |
|   45 |      45 |                                                     1 |
|   46 |      46 |                                                     1 |
|   47 |      47 |                                                     1 |
|   48 |      48 |                                                     1 |
|   49 |      49 |                                                     1 |
|   50 |      50 |                                                     1 |
+------+---------+-------------------------------------------------------+

##############################
##    delete from
##############################
delete from t1 where c1 = ( with RECURSIVE cte(c1, c2, c3) as (select 1,1,1 from dual union all select c1+1,c2+1,c3+1 from cte where cte.c1 < 50) select c1 from cte where c2 = 3);
select * from t1;
+------+------+------+
| c1   | c2   | c3   |
+------+------+------+
|    1 |    2 |    3 |
|    4 |    5 |    6 |
|    7 |    8 |    9 |
|   10 |   11 |   12 |
|   13 |   14 |   15 |
|   16 |   17 |   18 |
|   19 |   20 |   21 |
+------+------+------+

drop database cte_st;
